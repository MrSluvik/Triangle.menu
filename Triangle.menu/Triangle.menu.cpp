// Class - тип трикутника .Написати клас Triangle(трикутник), що містить поля координати вершин трикутника цілого типу x1, y1, x2, y2, x3, y3.
//Реалізувати конструктори :по замовчуванню, що обнулює координати вершин трикутника; з парамитрами, що отримує координати цілого типу вершин трикутника і ініціаліхує їх.
//Реалізувати методи які перевітяють тип трикутника. Реалізуйте меню для користувача :1 - Введення даних,2 - Виведення даних,0 - Вихід
#include <iostream>
#include<Windows.h>
#include <cmath>
using namespace std;
class Triangle
{
private:  int x1, x2, x3, y1, y2, y3;
	   double AB, BC, CA;//додаткові змінні для знаходження сторін трикутника 
public:	//double AB, BC, CA;//додаткові змінні для знаходження сторін трикутника 
	  Triangle() {//конструктор: по замовчуванню, що обнулює координати вершин трикутника; А також обнуляє додаткові змінні
		  x1 = 0;	x2 = 0; x3 = 0; y1 = 0;	y2 = 0;	y3 = 0;
		  AB = 0; BC = 0; CA = 0;
	  };
	  Triangle(int x1, int y1, int x2, int y2, int x3, int y3) {//конструктор: з парамитрами, що отримує координати цілого типу вершин трикутника і ініціаліхує їх.
		  this->x1 = x1;
		  this->y1 = y1;		
		  this->x2 = x2;
		  this->y2 = y2;
		  this->x3 = x3;
		  this->y3 = y3;
	  };		
	  void sAB();//метод для обчислення довжини сторін не добуваючи корінь
	  void form();//метод для обчислення типу трикутника по сторонах
	  void type1();// метод для обчислення типу трикутника по кутах 
};
int main()
{
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	int x1=0, x2=0, x3=0, y1=0, y2=0, y3=0;
	int c;//змінна для вибору функцій
	cout << "Виберіть наступну функцію :" << endl;
	cout << "1 : Введення даних" << endl;
	cout << "2 : Виведення даних" << endl;
	cout << "0 : Вихід" << endl;
	cin >> c;
	while (c!=0)
	{	
		if (c == 1) {//якщо 1 то ми вводим координати 
			cout << "Введіть координати вершин трикутника x1, y1, x2, y2, x3, y3:" << endl;
			cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;
			cout << "Щоб продовжити введіть  одну із функцій:" << endl;
			cin >> c;
		}
		Triangle First(x1, y1, x2, y2, x3, y3);		
		if (c == 2) {//якщо данні то ми виводим координати
			First.sAB();
			First.form();			
			First.type1();		
			cout << "Щоб продовжити введіть  одну із функцій:" << endl;	
			cin >> c;
		}
	}	
}
void Triangle::sAB()
{
	AB = (((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1)));//знаходимо по координатах		
	BC = (((x2 - x3) * (x2 - x3)) + ((y2 - y3) * (y2 - y3)));//довжину сторін				 
	CA = (((x3 - x1) * (x3 - x1)) + ((y3 - y1) * (y3 - y1)));//трикутника	але не добуваєм корінь як зазначено у формулі для того щоб коректно вказати тип трикутника
	cout << "  Дані довжини подані під коренем , оскільки добування корення призведе до неточності визначення типу трикутника за кутами " << endl;
	cout << "  AB = " << AB << endl;
	cout << "  BC = " << BC << endl;
	cout << "  CA = " << CA << endl;
}
void Triangle::form()
{
	if ((AB == BC) and (AB == CA)) {
		cout << "Трикутник рівносторонній " << endl;
	}
	else  if (((AB == BC) and (AB != CA)) or ((AB == CA) and (BC != CA)) or ((CA == BC) and (CA != AB))) {
		cout << "Трикутник рівнобедрений " << endl;
	}
	else if ((AB != BC) and (AB != CA) and (BC != CA)) {
		cout << "Трикутник різносторонній " << endl;
	}
}
void Triangle::type1()
{
	if ((AB + CA == BC) or (AB + BC == CA) or (BC + CA == AB)) {
		cout << "Трикутник прямокутній" << endl;
	}
	else if ((AB + CA < BC) or (AB + BC < CA) or (BC + CA < AB)) {
		cout << "Трикутник тупокутній" << endl;
	}
	else if ((AB + CA > BC) or (AB + BC > CA) or (BC + CA > AB)) {
		cout << "Трикутник гострокутній" << endl;
	}
}